name: 更新KSU版本

on:
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v3
      
      - name: 配置Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: 安装依赖
        run: |
          sudo apt update
          sudo apt install -y git curl
      
      - name: 获取KSU版本号
        id: extract_version
        run: |
          # 设置分支参数（与原始action相同）
          echo "BRANCH=-s susfs-dev" >> $GITHUB_ENV
          
          # 创建与原始action相同的临时工作目录
          mkdir -p kernel_workspace/kernel_platform
          cd kernel_workspace/kernel_platform
          
          # 获取KernelSU
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }} || true
          
          # 如果目录不存在则直接克隆
          if [ ! -d "./KernelSU" ]; then
            git clone https://github.com/ShirkNeko/KernelSU.git --branch susfs-dev --depth=1
          fi
          
          # 进入KernelSU目录计算版本号
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 12505)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "当前KSU版本: $KSU_VERSION"
      
      - name: 创建或更新version分支
        run: |
          # 创建孤立的version分支或使用现有的version分支
          if git ls-remote --heads origin version | grep version; then
            git fetch origin version
            git checkout version
            # 保留.git目录，但删除其他所有文件
            find . -path ./.git -prune -o -exec rm -rf {} \; 2>/dev/null || true
          else
            # 创建孤立分支
            git checkout --orphan version
            git rm -rf .
          fi
          
          # 更新version.txt
          echo "${{ env.KSUVER }}" > version.txt
          git add version.txt
          git commit -m "更新KSU版本至 ${{ env.KSUVER }}" || echo "无变更"
          git push -f origin version 